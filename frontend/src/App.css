<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced TTS App</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Animated Background */
        body {
            font-family: 'Poppins', sans-serif;
            min-height: 100vh;
            background: linear-gradient(-45deg, #667eea, #764ba2, #f093fb, #f5576c, #4facfe, #00f2fe);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            position: relative;
            overflow: hidden;
        }

        @keyframes gradientShift {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        /* Floating Particles */
        .particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: rgba(255, 255, 255, 0.6);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% {
                transform: translateY(0px) rotate(0deg);
                opacity: 0.4;
            }
            50% {
                transform: translateY(-20px) rotate(180deg);
                opacity: 1;
            }
        }

        /* Glassmorphism Container */
        .container {
            max-width: 550px;
            width: 100%;
            padding: 40px;
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
            text-align: center;
            position: relative;
            z-index: 2;
            animation: slideIn 0.8s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Glowing Header */
        h1 {
            color: #ffffff;
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 30px;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from {
                text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
            }
            to {
                text-shadow: 0 0 30px rgba(255, 255, 255, 0.8);
            }
        }

        /* Enhanced Textarea */
        .text-input {
            width: 100%;
            height: 120px;
            padding: 20px;
            font-size: 16px;
            font-family: 'Poppins', sans-serif;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            resize: none;
            outline: none;
            color: #ffffff;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .text-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .text-input:focus {
            border-color: rgba(255, 255, 255, 0.5);
            box-shadow: 0 0 30px rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        /* Animated Convert Button */
        .convert-button {
            margin-top: 25px;
            padding: 15px 35px;
            font-size: 18px;
            font-weight: 600;
            color: #ffffff;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
            position: relative;
            overflow: hidden;
        }

        .convert-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s;
        }

        .convert-button:hover::before {
            left: 100%;
        }

        .convert-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.6);
        }

        .convert-button:disabled {
            background: rgba(255, 255, 255, 0.2);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* Enhanced Audio Container */
        .audio-container {
            margin-top: 30px;
            padding: 25px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            animation: fadeIn 0.5s ease-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .audio-container p {
            font-size: 18px;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 15px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        /* Custom Audio Player */
        audio {
            width: 100%;
            height: 50px;
            outline: none;
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        audio::-webkit-media-controls-panel {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 25px;
        }

        /* Pulsing Animation for Active States */
        .pulse {
            animation: pulse 1.5s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.02);
            }
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            .container {
                width: 95%;
                padding: 25px;
                margin: 10px;
            }
            
            h1 {
                font-size: 24px;
            }
            
            .text-input {
                font-size: 14px;
                height: 100px;
                padding: 15px;
            }
            
            .convert-button {
                font-size: 16px;
                padding: 12px 28px;
            }
        }

        /* Loading Animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #ffffff;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Sound Wave Animation */
        .sound-wave {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 10px 0;
        }

        .wave-bar {
            width: 3px;
            height: 15px;
            background: #ffffff;
            margin: 0 2px;
            border-radius: 3px;
            animation: wave 1s ease-in-out infinite;
        }

        .wave-bar:nth-child(2) { animation-delay: 0.1s; }
        .wave-bar:nth-child(3) { animation-delay: 0.2s; }
        .wave-bar:nth-child(4) { animation-delay: 0.3s; }
        .wave-bar:nth-child(5) { animation-delay: 0.4s; }

        @keyframes wave {
            0%, 100% { height: 15px; }
            50% { height: 25px; }
        }
    </style>
</head>
<body>
    <!-- Floating Particles -->
    <div class="particles">
        <div class="particle" style="left: 20%; animation-delay: 0s;"></div>
        <div class="particle" style="left: 40%; animation-delay: 2s;"></div>
        <div class="particle" style="left: 60%; animation-delay: 4s;"></div>
        <div class="particle" style="left: 80%; animation-delay: 6s;"></div>
        <div class="particle" style="left: 10%; top: 70%; animation-delay: 1s;"></div>
        <div class="particle" style="left: 30%; top: 80%; animation-delay: 3s;"></div>
        <div class="particle" style="left: 70%; top: 60%; animation-delay: 5s;"></div>
        <div class="particle" style="left: 90%; top: 20%; animation-delay: 7s;"></div>
    </div>

    <!-- Main Container -->
    <div class="container">
        <h1>üéôÔ∏è Text to Speech</h1>
        
        <textarea 
            class="text-input" 
            placeholder="Enter your text here to convert to speech..."
            id="textInput"
        ></textarea>
        
        <button class="convert-button" id="convertBtn" onclick="convertText()">
            <span id="buttonText">Convert to Speech</span>
        </button>
        
        <div class="audio-container" id="audioContainer" style="display: none;">
            <p>üîä Your Audio is Ready!</p>
            <div class="sound-wave">
                <div class="wave-bar"></div>
                <div class="wave-bar"></div>
                <div class="wave-bar"></div>
                <div class="wave-bar"></div>
                <div class="wave-bar"></div>
            </div>
            <audio controls id="audioPlayer">
                <source src="#" type="audio/mpeg">
                Your browser does not support the audio element.
            </audio>
        </div>
    </div>

    <script>
        // Demo functionality
        function convertText() {
            const button = document.getElementById('convertBtn');
            const buttonText = document.getElementById('buttonText');
            const textInput = document.getElementById('textInput');
            const audioContainer = document.getElementById('audioContainer');
            
            if (textInput.value.trim() === '') {
                alert('Please enter some text to convert!');
                return;
            }
            
            // Show loading state
            button.disabled = true;
            buttonText.innerHTML = '<span class="loading"></span>Converting...';
            
            // Simulate API call
            setTimeout(() => {
                // Reset button
                button.disabled = false;
                buttonText.textContent = 'Convert to Speech';
                
                // Show audio player (demo)
                audioContainer.style.display = 'block';
                audioContainer.classList.add('pulse');
                
                // Remove pulse after animation
                setTimeout(() => {
                    audioContainer.classList.remove('pulse');
                }, 1500);
                
                // Note: In a real app, you would set the audio source here
                // audioPlayer.src = 'generated-audio-url';
            }, 2000);
        }
        
        // Add dynamic particle generation
        function createParticle() {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.top = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 6 + 's';
            document.querySelector('.particles').appendChild(particle);
            
            // Remove particle after animation
            setTimeout(() => {
                particle.remove();
            }, 6000);
        }
        
        // Generate particles periodically
        setInterval(createParticle, 3000);
    </script>
</body>
</html>
